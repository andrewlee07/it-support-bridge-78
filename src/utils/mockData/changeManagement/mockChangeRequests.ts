
import { ChangeRequest } from '../../types';
import { createAuditEntries } from '../auditHelpers';

// Mock change requests
export const mockChangeRequests: ChangeRequest[] = [
  {
    id: 'CHG00001',
    title: 'Network Router Upgrade',
    description: 'Upgrade all office routers to new firmware version.',
    status: 'approved',
    priority: 'P2',
    category: 'normal',
    type: 'change',
    createdBy: 'user-2',
    assignedTo: 'user-1',
    implementor: 'user-1',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 5)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 2)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 2)),
    riskScore: 2.2,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a4', value: 1 },
      { questionId: 'question-2', selectedOptionId: 'q2-a2', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a1', value: 5 },
      { questionId: 'question-4', selectedOptionId: 'q4-a3', value: 1 }
    ],
    implementationPlan: 'Upgrade routers after business hours with network team on standby.',
    rollbackPlan: 'Restore from firmware backup if issues arise.',
    approvedBy: 'user-1',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    audit: createAuditEntries('CHG00001', 'change', 'user-2'),
  },
  {
    id: 'CHG00002',
    title: 'Email Server Migration',
    description: 'Migrate email server to new cloud infrastructure.',
    status: 'submitted',
    priority: 'P1',
    category: 'emergency',
    type: 'change',
    createdBy: 'user-2',
    implementor: 'user-3',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 5)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 6)),
    riskScore: 3.8,
    riskLevel: 'high',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a3', value: 2 },
      { questionId: 'question-2', selectedOptionId: 'q2-a1', value: 5 },
      { questionId: 'question-3', selectedOptionId: 'q3-a1', value: 5 },
      { questionId: 'question-4', selectedOptionId: 'q4-a2', value: 3 }
    ],
    implementationPlan: 'Phase migration over weekend with IT team monitoring.',
    rollbackPlan: 'Revert to old server if not completed successfully.',
    audit: createAuditEntries('CHG00002', 'change', 'user-2'),
  },
  {
    id: 'CHG00003',
    title: 'Windows Update Deployment',
    description: 'Deploy latest Windows security updates to all workstations.',
    status: 'completed',
    priority: 'P3',
    category: 'standard',
    type: 'change',
    createdBy: 'user-2',
    assignedTo: 'user-2',
    implementor: 'user-2',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 10)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    startDate: new Date(new Date().setDate(new Date().getDate() - 5)),
    endDate: new Date(new Date().setDate(new Date().getDate() - 4)),
    riskScore: 1.6,
    riskLevel: 'low',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a4', value: 1 },
      { questionId: 'question-2', selectedOptionId: 'q2-a2', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a2', value: 4 },
      { questionId: 'question-4', selectedOptionId: 'q4-a3', value: 1 }
    ],
    implementationPlan: 'Push updates via WSUS after hours.',
    rollbackPlan: 'Use system restore points if issues occur.',
    approvedBy: 'user-1',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 7)),
    audit: createAuditEntries('CHG00003', 'change', 'user-2'),
  },
  {
    id: 'CHG00004',
    title: 'Database Server Upgrade',
    description: 'Upgrade SQL Server from 2019 to 2022 for improved performance and security.',
    status: 'submitted',
    priority: 'P2',
    category: 'normal',
    type: 'change',
    createdBy: 'user-1',
    implementor: 'user-3',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 1)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 7)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 7)),
    riskScore: 3.2,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a2', value: 3 },
      { questionId: 'question-2', selectedOptionId: 'q2-a3', value: 2 },
      { questionId: 'question-3', selectedOptionId: 'q3-a2', value: 4 },
      { questionId: 'question-4', selectedOptionId: 'q4-a1', value: 4 }
    ],
    implementationPlan: 'Backup database, install new version, migrate data, test, and verify.',
    rollbackPlan: 'Restore from backup if issues occur during migration.',
    audit: createAuditEntries('CHG00004', 'change', 'user-1'),
  },
  {
    id: 'CHG00005',
    title: 'Network Firewall Configuration Update',
    description: 'Update firewall rules to implement new security policies and block emerging threats.',
    status: 'approved',
    priority: 'P1',
    category: 'emergency',
    type: 'change',
    createdBy: 'user-3',
    assignedTo: 'user-1',
    implementor: 'user-1',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 1)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 1)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 1)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 1)),
    riskScore: 3.5,
    riskLevel: 'high',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a1', value: 5 },
      { questionId: 'question-2', selectedOptionId: 'q2-a1', value: 5 },
      { questionId: 'question-3', selectedOptionId: 'q3-a3', value: 2 },
      { questionId: 'question-4', selectedOptionId: 'q4-a2', value: 3 }
    ],
    implementationPlan: 'Apply rules incrementally with each set tested before proceeding.',
    rollbackPlan: 'Revert to previous rule set if service disruptions occur.',
    approvedBy: 'user-2',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 1)),
    audit: createAuditEntries('CHG00005', 'change', 'user-3'),
  },
  {
    id: 'CHG00006',
    title: 'VPN Infrastructure Upgrade',
    description: 'Upgrade VPN infrastructure to support increased remote workforce with better security.',
    status: 'completed',
    priority: 'P2',
    category: 'normal',
    type: 'change',
    createdBy: 'user-1',
    assignedTo: 'user-3',
    implementor: 'user-3',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 15)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 5)),
    startDate: new Date(new Date().setDate(new Date().getDate() - 7)),
    endDate: new Date(new Date().setDate(new Date().getDate() - 6)),
    riskScore: 2.8,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a3', value: 2 },
      { questionId: 'question-2', selectedOptionId: 'q2-a2', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a1', value: 5 },
      { questionId: 'question-4', selectedOptionId: 'q4-a2', value: 3 }
    ],
    implementationPlan: 'Phased deployment starting with test group, then full rollout.',
    rollbackPlan: 'Switch back to old VPN system if performance issues arise.',
    approvedBy: 'user-2',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 9)),
    audit: createAuditEntries('CHG00006', 'change', 'user-1'),
  },
  {
    id: 'CHG00007',
    title: 'Cloud Storage Migration',
    description: 'Migrate on-premises file storage to cloud-based solution for improved access and disaster recovery.',
    status: 'submitted',
    priority: 'P3',
    category: 'standard',
    type: 'change',
    createdBy: 'user-2',
    implementor: 'user-2',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 4)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 4)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 10)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 12)),
    riskScore: 2.0,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a4', value: 1 },
      { questionId: 'question-2', selectedOptionId: 'q2-a3', value: 2 },
      { questionId: 'question-3', selectedOptionId: 'q3-a2', value: 4 },
      { questionId: 'question-4', selectedOptionId: 'q4-a3', value: 1 }
    ],
    implementationPlan: 'Migrate in batches by department, with verification steps after each batch.',
    rollbackPlan: 'Keep original storage system operational until migration fully verified.',
    audit: createAuditEntries('CHG00007', 'change', 'user-2'),
  },
  {
    id: 'CHG00008',
    title: 'Email Security Gateway Implementation',
    description: 'Deploy new email security gateway to improve spam filtering and phishing protection.',
    status: 'approved',
    priority: 'P2',
    category: 'normal',
    type: 'change',
    createdBy: 'user-3',
    assignedTo: 'user-1',
    implementor: 'user-1',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 6)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 3)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 4)),
    riskScore: 1.8,
    riskLevel: 'low',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a4', value: 1 },
      { questionId: 'question-2', selectedOptionId: 'q2-a4', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a3', value: 2 },
      { questionId: 'question-4', selectedOptionId: 'q4-a3', value: 1 }
    ],
    implementationPlan: 'Deploy in monitoring mode first, then gradually increase filtering strictness.',
    rollbackPlan: 'Revert MX records to previous mail server if delivery issues occur.',
    approvedBy: 'user-2',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    audit: createAuditEntries('CHG00008', 'change', 'user-3'),
  },
  {
    id: 'CHG00009',
    title: 'Server Room Cooling System Upgrade',
    description: 'Install additional cooling capacity in server room to support new hardware deployment.',
    status: 'submitted',
    priority: 'P1',
    category: 'emergency',
    type: 'change',
    createdBy: 'user-1',
    implementor: 'user-3',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 1)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 2)),
    riskScore: 4.0,
    riskLevel: 'high',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a1', value: 5 },
      { questionId: 'question-2', selectedOptionId: 'q2-a2', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a1', value: 5 },
      { questionId: 'question-4', selectedOptionId: 'q4-a1', value: 5 }
    ],
    implementationPlan: 'Contractor will install after hours with IT monitoring temperatures throughout.',
    rollbackPlan: 'Temporary cooling units on standby if installation fails.',
    audit: createAuditEntries('CHG00009', 'change', 'user-1'),
  },
  {
    id: 'CHG00010',
    title: 'Endpoint Security Suite Upgrade',
    description: 'Upgrade antivirus and security monitoring tools on all endpoints to latest version.',
    status: 'completed',
    priority: 'P2',
    category: 'standard',
    type: 'change',
    createdBy: 'user-2',
    assignedTo: 'user-2',
    implementor: 'user-2',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 20)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 8)),
    startDate: new Date(new Date().setDate(new Date().getDate() - 12)),
    endDate: new Date(new Date().setDate(new Date().getDate() - 10)),
    riskScore: 1.5,
    riskLevel: 'low',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a4', value: 1 },
      { questionId: 'question-2', selectedOptionId: 'q2-a3', value: 2 },
      { questionId: 'question-3', selectedOptionId: 'q3-a4', value: 1 },
      { questionId: 'question-4', selectedOptionId: 'q4-a3', value: 1 }
    ],
    implementationPlan: 'Automated deployment via system management tools, staggered by department.',
    rollbackPlan: 'Automated rollback script if compatibility issues emerge.',
    approvedBy: 'user-1',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 15)),
    audit: createAuditEntries('CHG00010', 'change', 'user-2'),
  },
  {
    id: 'CHG00011',
    title: 'CRM System Upgrade',
    description: 'Upgrade CRM to latest version with new sales pipeline and reporting features.',
    status: 'approved',
    priority: 'P3',
    category: 'normal',
    type: 'change',
    createdBy: 'user-3',
    assignedTo: 'user-2',
    implementor: 'user-2',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 8)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 5)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 6)),
    riskScore: 2.5,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a3', value: 2 },
      { questionId: 'question-2', selectedOptionId: 'q2-a2', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a3', value: 2 },
      { questionId: 'question-4', selectedOptionId: 'q4-a2', value: 3 }
    ],
    implementationPlan: 'Weekend upgrade with sales team testing prior to Monday opening.',
    rollbackPlan: 'Database and application backup with 2-hour restoration window if needed.',
    approvedBy: 'user-1',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 2)),
    audit: createAuditEntries('CHG00011', 'change', 'user-3'),
  },
  {
    id: 'CHG00012',
    title: 'Office WiFi Network Expansion',
    description: 'Add additional access points to improve WiFi coverage in new office areas.',
    status: 'in-progress',
    priority: 'P3',
    category: 'standard',
    type: 'change',
    createdBy: 'user-1',
    assignedTo: 'user-3',
    implementor: 'user-3',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 10)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 1)),
    startDate: new Date(new Date().setDate(new Date().getDate() - 2)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 2)),
    riskScore: 1.2,
    riskLevel: 'low',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a4', value: 1 },
      { questionId: 'question-2', selectedOptionId: 'q2-a4', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a3', value: 2 },
      { questionId: 'question-4', selectedOptionId: 'q4-a4', value: 0 }
    ],
    implementationPlan: 'Install and configure new access points after hours, one floor at a time.',
    rollbackPlan: 'Remove new access points and restore original configuration if interference occurs.',
    approvedBy: 'user-2',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 5)),
    audit: createAuditEntries('CHG00012', 'change', 'user-1'),
  },
  {
    id: 'CHG00013',
    title: 'Data Center Power Maintenance',
    description: 'Scheduled maintenance on UPS and generator systems in primary data center.',
    status: 'approved',
    priority: 'P1',
    category: 'normal',
    type: 'change',
    createdBy: 'user-2',
    assignedTo: 'user-1',
    implementor: 'user-1',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 15)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 5)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 8)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 8)),
    riskScore: 3.7,
    riskLevel: 'high',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a1', value: 5 },
      { questionId: 'question-2', selectedOptionId: 'q2-a3', value: 2 },
      { questionId: 'question-3', selectedOptionId: 'q3-a2', value: 4 },
      { questionId: 'question-4', selectedOptionId: 'q4-a1', value: 4 }
    ],
    implementationPlan: 'Failover to backup data center before maintenance, with full testing before and after.',
    rollbackPlan: 'Remain on backup data center if power issues occur during maintenance.',
    approvedBy: 'user-3',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 5)),
    audit: createAuditEntries('CHG00013', 'change', 'user-2'),
  },
  {
    id: 'CHG00014',
    title: 'Software License Server Upgrade',
    description: 'Upgrade license server software to support new CAD applications.',
    status: 'in-progress',
    priority: 'P2',
    category: 'normal',
    type: 'change',
    createdBy: 'user-3',
    assignedTo: 'user-2',
    implementor: 'user-2',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 7)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 1)),
    startDate: new Date(new Date().setDate(new Date().getDate() - 1)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 1)),
    riskScore: 2.3,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a3', value: 2 },
      { questionId: 'question-2', selectedOptionId: 'q2-a3', value: 2 },
      { questionId: 'question-3', selectedOptionId: 'q3-a2', value: 4 },
      { questionId: 'question-4', selectedOptionId: 'q4-a3', value: 1 }
    ],
    implementationPlan: 'Install new server in parallel, test all license types, then migrate users.',
    rollbackPlan: 'Keep old server operational until fully verified, can revert if needed.',
    approvedBy: 'user-1',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    audit: createAuditEntries('CHG00014', 'change', 'user-3'),
  },
  {
    id: 'CHG00015',
    title: 'Active Directory Schema Update',
    description: 'Update AD schema to support new application authentication requirements.',
    status: 'submitted',
    priority: 'P2',
    category: 'normal',
    type: 'change',
    createdBy: 'user-1',
    implementor: 'user-1',
    createdAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    updatedAt: new Date(new Date().setDate(new Date().getDate() - 3)),
    startDate: new Date(new Date().setDate(new Date().getDate() + 6)),
    endDate: new Date(new Date().setDate(new Date().getDate() + 6)),
    riskScore: 3.1,
    riskLevel: 'medium',
    assessmentAnswers: [
      { questionId: 'question-1', selectedOptionId: 'q1-a2', value: 3 },
      { questionId: 'question-2', selectedOptionId: 'q2-a2', value: 1 },
      { questionId: 'question-3', selectedOptionId: 'q3-a1', value: 5 },
      { questionId: 'question-4', selectedOptionId: 'q4-a2', value: 3 }
    ],
    implementationPlan: 'Test in lab environment first, then implement in production with monitoring.',
    rollbackPlan: 'Not directly reversible - must implement alternative authentication if issues occur.',
    audit: createAuditEntries('CHG00015', 'change', 'user-1'),
  }
];

// Helper function to get change request by ID
export const getChangeRequestById = (id: string): ChangeRequest | undefined => {
  return mockChangeRequests.find(change => change.id === id);
};
